package com.trg.boot;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.math.BigDecimal;
import java.util.List;

import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.InvalidDataAccessApiUsageException;

import com.trg.boot.entity.BankAccount;
import com.trg.boot.entity.Wallet;
import com.trg.boot.exceptions.InvalidUserInputException;
import com.trg.boot.repository.IAccountRepository;
import com.trg.boot.repository.WalletRepository;
import com.trg.boot.service.IAccountService;

@SpringBootTest
public class IAccountServicetests {
	@Autowired
	IAccountRepository arepo;
	@Autowired
	WalletRepository wrepo;
	@Autowired
	IAccountService accountService;
	
	@Test
	void contextLods() {
		
	}
	@Test
	     public void addAccountTest() {
		     BankAccount ba = new BankAccount();
		     ba.setAccountNo(555);
		     ba.setIfscCode("abc434");
		     ba.setBankName("abcd");
		     ba.setBalance(9542.25);
		     ba.setWallet(new Wallet(1,new BigDecimal(9542.25)));
		     arepo.save(ba);
		 assertNotNull(arepo.findById(ba.getAccountNo()));
	} 
	 @Test
	 public void addAccountExpectExceptionTest() {
	     BankAccount ba = new BankAccount();
	     ba.setAccountNo(144);
	     ba.setIfscCode("abc434");
	     ba.setBankName("abcd");
	     ba.setBalance(9542.25);
	     ba.setWallet(new Wallet(1,new BigDecimal(9542.25)));
	     assertThrows(InvalidUserInputException.class,()-> accountService.addAccount(ba));
	
		 
	}
    @Test
         public void viewAccountTest() {
        	 BankAccount ba = arepo.findById(555);
        	 Wallet wt = wrepo.findById(1).get();
        	 assertThat(wrepo.findById(wt.getWalletId()));
        	
         }
    @Test
         public void viewAccountExpectExceptionTest() {
   	         BankAccount ba = arepo.findById(666);
   	         Wallet wt = wrepo.findById(1).get();
   	         assertThrows(InvalidUserInputException.class,()-> accountService.viewAccount(666));
    }
   	
    @Test
         public void viewBankAccountTest() {
   	         BankAccount ba = arepo.findById(111);
	         assertNotEquals(ba.getAccountNo(),555);
    }
    @Test
         public void viewBankAccountExpectExceptionTest() {
	         BankAccount ba = arepo.findById(333);
             assertThrows(InvalidUserInputException.class,()-> accountService.viewBankAccount(333));
}       
    
    @Test
         public void viewAllAccountTest() {
    	     List<BankAccount> bankAccountList = arepo.findAll();
    	     assertThat((bankAccountList).size()>=0);
    	     
    }
    @Test
         public void viewAllAccountExpectExceptionTest() {
	     
    	     assertThrows(InvalidUserInputException.class,()-> accountService.viewAllAccounts());
    
    }
    
    @Test
         public void deleteBankAccountTest() {
    	      BankAccount b = arepo.findById(555);
    	      if(b!=null) {
    	    	  arepo.delete(b);
    	      }
    	      BankAccount ba=arepo.findById(555);
    	      assertThat(ba == null);
    }
    @Test
        public void deleteBankAccountExpectExceptionTest() {
  	      BankAccount b = arepo.findById(555);
  	      if(b!=null) {
  	    	  arepo.delete(b);
  	      }
  	      BankAccount ba=arepo.findById(555);
  	      assertThrows(InvalidDataAccessApiUsageException.class,()->arepo.delete(ba));
  }

}

